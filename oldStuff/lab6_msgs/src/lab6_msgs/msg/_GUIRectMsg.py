"""autogenerated by genmsg_py from GUIRectMsg.msg. Do not edit."""
import roslib.message
import struct

import lab5_msgs.msg

class GUIRectMsg(roslib.message.Message):
  _md5sum = "c0bf17dcdde695b717319df27b23e5f8"
  _type = "lab6_msgs/GUIRectMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """lab5_msgs/ColorMsg c
float32 x
float32 y
float32 width
float32 height
int32 filled
================================================================================
MSG: lab5_msgs/ColorMsg
int64 r
int64 g
int64 b
"""
  __slots__ = ['c','x','y','width','height','filled']
  _slot_types = ['lab5_msgs/ColorMsg','float32','float32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       c,x,y,width,height,filled
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(GUIRectMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.c is None:
        self.c = lab5_msgs.msg.ColorMsg()
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.filled is None:
        self.filled = 0
    else:
      self.c = lab5_msgs.msg.ColorMsg()
      self.x = 0.
      self.y = 0.
      self.width = 0.
      self.height = 0.
      self.filled = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3q4fi.pack(_x.c.r, _x.c.g, _x.c.b, _x.x, _x.y, _x.width, _x.height, _x.filled))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.c is None:
        self.c = lab5_msgs.msg.ColorMsg()
      end = 0
      _x = self
      start = end
      end += 44
      (_x.c.r, _x.c.g, _x.c.b, _x.x, _x.y, _x.width, _x.height, _x.filled,) = _struct_3q4fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3q4fi.pack(_x.c.r, _x.c.g, _x.c.b, _x.x, _x.y, _x.width, _x.height, _x.filled))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.c is None:
        self.c = lab5_msgs.msg.ColorMsg()
      end = 0
      _x = self
      start = end
      end += 44
      (_x.c.r, _x.c.g, _x.c.b, _x.x, _x.y, _x.width, _x.height, _x.filled,) = _struct_3q4fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3q4fi = struct.Struct("<3q4fi")
