"""autogenerated by genmsg_py from GUIPolyMsg.msg. Do not edit."""
import roslib.message
import struct

import lab5_msgs.msg

class GUIPolyMsg(roslib.message.Message):
  _md5sum = "3e548996167a0b4f0dd625274639c5b7"
  _type = "lab6_msgs/GUIPolyMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """lab5_msgs/ColorMsg c
int32 numVertices
float32[] x
float32[] y
int32 closed
int32 filled
================================================================================
MSG: lab5_msgs/ColorMsg
int64 r
int64 g
int64 b
"""
  __slots__ = ['c','numVertices','x','y','closed','filled']
  _slot_types = ['lab5_msgs/ColorMsg','int32','float32[]','float32[]','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       c,numVertices,x,y,closed,filled
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(GUIPolyMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.c is None:
        self.c = lab5_msgs.msg.ColorMsg()
      if self.numVertices is None:
        self.numVertices = 0
      if self.x is None:
        self.x = []
      if self.y is None:
        self.y = []
      if self.closed is None:
        self.closed = 0
      if self.filled is None:
        self.filled = 0
    else:
      self.c = lab5_msgs.msg.ColorMsg()
      self.numVertices = 0
      self.x = []
      self.y = []
      self.closed = 0
      self.filled = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3qi.pack(_x.c.r, _x.c.g, _x.c.b, _x.numVertices))
      length = len(self.x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.x))
      length = len(self.y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.y))
      _x = self
      buff.write(_struct_2i.pack(_x.closed, _x.filled))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.c is None:
        self.c = lab5_msgs.msg.ColorMsg()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.c.r, _x.c.g, _x.c.b, _x.numVertices,) = _struct_3qi.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.y = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.closed, _x.filled,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3qi.pack(_x.c.r, _x.c.g, _x.c.b, _x.numVertices))
      length = len(self.x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.x.tostring())
      length = len(self.y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.y.tostring())
      _x = self
      buff.write(_struct_2i.pack(_x.closed, _x.filled))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.c is None:
        self.c = lab5_msgs.msg.ColorMsg()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.c.r, _x.c.g, _x.c.b, _x.numVertices,) = _struct_3qi.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 8
      (_x.closed, _x.filled,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3qi = struct.Struct("<3qi")
_struct_2i = struct.Struct("<2i")
