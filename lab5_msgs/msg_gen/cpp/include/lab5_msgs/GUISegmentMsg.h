/* Auto-generated by genmsg_cpp for file /home/rss-student/RSS-I-group/lab5_msgs/msg/GUISegmentMsg.msg */
#ifndef LAB5_MSGS_MESSAGE_GUISEGMENTMSG_H
#define LAB5_MSGS_MESSAGE_GUISEGMENTMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "lab5_msgs/ColorMsg.h"

namespace lab5_msgs
{
template <class ContainerAllocator>
struct GUISegmentMsg_ {
  typedef GUISegmentMsg_<ContainerAllocator> Type;

  GUISegmentMsg_()
  : startX(0.0)
  , endX(0.0)
  , startY(0.0)
  , endY(0.0)
  , color()
  {
  }

  GUISegmentMsg_(const ContainerAllocator& _alloc)
  : startX(0.0)
  , endX(0.0)
  , startY(0.0)
  , endY(0.0)
  , color(_alloc)
  {
  }

  typedef double _startX_type;
  double startX;

  typedef double _endX_type;
  double endX;

  typedef double _startY_type;
  double startY;

  typedef double _endY_type;
  double endY;

  typedef  ::lab5_msgs::ColorMsg_<ContainerAllocator>  _color_type;
   ::lab5_msgs::ColorMsg_<ContainerAllocator>  color;


private:
  static const char* __s_getDataType_() { return "lab5_msgs/GUISegmentMsg"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0c882de09f5b3bc620b839f4d58554ba"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64 startX\n\
float64 endX\n\
float64 startY\n\
float64 endY\n\
ColorMsg color\n\
================================================================================\n\
MSG: lab5_msgs/ColorMsg\n\
int64 r\n\
int64 g\n\
int64 b\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, startX);
    ros::serialization::serialize(stream, endX);
    ros::serialization::serialize(stream, startY);
    ros::serialization::serialize(stream, endY);
    ros::serialization::serialize(stream, color);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, startX);
    ros::serialization::deserialize(stream, endX);
    ros::serialization::deserialize(stream, startY);
    ros::serialization::deserialize(stream, endY);
    ros::serialization::deserialize(stream, color);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(startX);
    size += ros::serialization::serializationLength(endX);
    size += ros::serialization::serializationLength(startY);
    size += ros::serialization::serializationLength(endY);
    size += ros::serialization::serializationLength(color);
    return size;
  }

  typedef boost::shared_ptr< ::lab5_msgs::GUISegmentMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lab5_msgs::GUISegmentMsg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GUISegmentMsg
typedef  ::lab5_msgs::GUISegmentMsg_<std::allocator<void> > GUISegmentMsg;

typedef boost::shared_ptr< ::lab5_msgs::GUISegmentMsg> GUISegmentMsgPtr;
typedef boost::shared_ptr< ::lab5_msgs::GUISegmentMsg const> GUISegmentMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::lab5_msgs::GUISegmentMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::lab5_msgs::GUISegmentMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace lab5_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::lab5_msgs::GUISegmentMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::lab5_msgs::GUISegmentMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::lab5_msgs::GUISegmentMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0c882de09f5b3bc620b839f4d58554ba";
  }

  static const char* value(const  ::lab5_msgs::GUISegmentMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0c882de09f5b3bc6ULL;
  static const uint64_t static_value2 = 0x20b839f4d58554baULL;
};

template<class ContainerAllocator>
struct DataType< ::lab5_msgs::GUISegmentMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "lab5_msgs/GUISegmentMsg";
  }

  static const char* value(const  ::lab5_msgs::GUISegmentMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::lab5_msgs::GUISegmentMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 startX\n\
float64 endX\n\
float64 startY\n\
float64 endY\n\
ColorMsg color\n\
================================================================================\n\
MSG: lab5_msgs/ColorMsg\n\
int64 r\n\
int64 g\n\
int64 b\n\
";
  }

  static const char* value(const  ::lab5_msgs::GUISegmentMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::lab5_msgs::GUISegmentMsg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::lab5_msgs::GUISegmentMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.startX);
    stream.next(m.endX);
    stream.next(m.startY);
    stream.next(m.endY);
    stream.next(m.color);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GUISegmentMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lab5_msgs::GUISegmentMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::lab5_msgs::GUISegmentMsg_<ContainerAllocator> & v) 
  {
    s << indent << "startX: ";
    Printer<double>::stream(s, indent + "  ", v.startX);
    s << indent << "endX: ";
    Printer<double>::stream(s, indent + "  ", v.endX);
    s << indent << "startY: ";
    Printer<double>::stream(s, indent + "  ", v.startY);
    s << indent << "endY: ";
    Printer<double>::stream(s, indent + "  ", v.endY);
    s << indent << "color: ";
s << std::endl;
    Printer< ::lab5_msgs::ColorMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
  }
};


} // namespace message_operations
} // namespace ros

#endif // LAB5_MSGS_MESSAGE_GUISEGMENTMSG_H

